/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.merge.api.resources.ticketing.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.merge.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = OperatorSchema.Builder.class)
public final class OperatorSchema {
    private final Optional<String> operator;

    private final Optional<Boolean> isUnique;

    private final Map<String, Object> additionalProperties;

    private OperatorSchema(
            Optional<String> operator, Optional<Boolean> isUnique, Map<String, Object> additionalProperties) {
        this.operator = operator;
        this.isUnique = isUnique;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The operator for which an operator schema is defined.
     */
    @JsonProperty("operator")
    public Optional<String> getOperator() {
        return operator;
    }

    /**
     * @return Whether the operator can be repeated multiple times.
     */
    @JsonProperty("is_unique")
    public Optional<Boolean> getIsUnique() {
        return isUnique;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OperatorSchema && equalTo((OperatorSchema) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OperatorSchema other) {
        return operator.equals(other.operator) && isUnique.equals(other.isUnique);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.operator, this.isUnique);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> operator = Optional.empty();

        private Optional<Boolean> isUnique = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OperatorSchema other) {
            operator(other.getOperator());
            isUnique(other.getIsUnique());
            return this;
        }

        @JsonSetter(value = "operator", nulls = Nulls.SKIP)
        public Builder operator(Optional<String> operator) {
            this.operator = operator;
            return this;
        }

        public Builder operator(String operator) {
            this.operator = Optional.of(operator);
            return this;
        }

        @JsonSetter(value = "is_unique", nulls = Nulls.SKIP)
        public Builder isUnique(Optional<Boolean> isUnique) {
            this.isUnique = isUnique;
            return this;
        }

        public Builder isUnique(Boolean isUnique) {
            this.isUnique = Optional.of(isUnique);
            return this;
        }

        public OperatorSchema build() {
            return new OperatorSchema(operator, isUnique, additionalProperties);
        }
    }
}
